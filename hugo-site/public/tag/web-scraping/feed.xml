<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Web-Scraping on DavidCraddock.net</title>
    <link>http://davidcraddock.net/tag/web-scraping/</link>
    <description>Recent content in Web-Scraping on DavidCraddock.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 07 Sep 2011 18:35:17 +0000</lastBuildDate><atom:link href="http://davidcraddock.net/tag/web-scraping/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JSoup Method for Page Scraping</title>
      <link>http://davidcraddock.net/2011/09/07/jsoup-method-for-page-scraping/</link>
      <pubDate>Wed, 07 Sep 2011 18:35:17 +0000</pubDate>
      
      <guid>http://davidcraddock.net/2011/09/07/jsoup-method-for-page-scraping/</guid>
      <description>I&amp;rsquo;m currently in the process of writing a web scraper for the forums on Gaia Online. Previously, I used to use Python to develop web scrapers, with the very handy Python library BeautifulSoup. Java has an equivalent called JSoup.
Here I have written a class which is extended by each class in my project that wants to scrape HTML. This &amp;lsquo;Scraper&amp;rsquo; class deals with the fetching of the HTML and converting it into a JSoup tree to be navigated and have the data picked out of.</description>
      <content:encoded><![CDATA[<p><a href="/wp-content/uploads/2011/09/soup.jpg"><img loading="lazy" src="/wp-content/uploads/2011/09/soup.jpg" type="" alt="Soup bowl"  /></a></p>
<p>I&rsquo;m currently in the process of writing a web scraper for the forums on <a href="http://www.gaiaonline.com/forum" title="Gaia Online">Gaia Online</a>. Previously, I used to use Python to develop web scrapers, with the very handy Python library <a href="http://www.crummy.com/software/BeautifulSoup/" title="BeautifulSoup">BeautifulSoup</a>. Java has an equivalent called JSoup.</p>
<p>Here I have written a class which is extended by each class in my project that wants to scrape HTML. This &lsquo;Scraper&rsquo; class deals with the fetching of the HTML and converting it into a JSoup tree to be navigated and have the data picked out of. It advertises itself as a &lsquo;web spider&rsquo; type of web agent and also adds a 0-7 second random wait before fetching the page to make sure it isn&rsquo;t used to overload a web server. It also converts the entire page to ASCII, which may not be the best thing to do for multi-language web pages, but certainly has made the scraping of the English language site Gaia Online much easier.</p>
<p>Here it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>import java.io.IOException;
</span></span><span style="display:flex;"><span>import java.io.InputStream;
</span></span><span style="display:flex;"><span>import java.io.StringWriter;
</span></span><span style="display:flex;"><span>import java.text.Normalizer;
</span></span><span style="display:flex;"><span>import java.util.Random;
</span></span><span style="display:flex;"><span>import org.apache.commons.io.IOUtils;
</span></span><span style="display:flex;"><span>import org.apache.http.HttpEntity;
</span></span><span style="display:flex;"><span>import org.apache.http.HttpResponse;
</span></span><span style="display:flex;"><span>import org.apache.http.client.HttpClient;
</span></span><span style="display:flex;"><span>import org.apache.http.client.methods.HttpGet;
</span></span><span style="display:flex;"><span>import org.apache.http.impl.client.DefaultHttpClient;
</span></span><span style="display:flex;"><span>import org.jsoup.Jsoup;
</span></span><span style="display:flex;"><span>import org.jsoup.nodes.Document;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/**
</span></span><span style="display:flex;"><span>* Generic scraper object that contains the basic methods required to fetch
</span></span><span style="display:flex;"><span>* and parse HTML content. Extended by other classes that need to scrape.
</span></span><span style="display:flex;"><span>*
</span></span><span style="display:flex;"><span>* @author David
</span></span><span style="display:flex;"><span>*/
</span></span><span style="display:flex;"><span>public class Scraper {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        public String pageHTML = &#34;&#34;; // the HTML for the page
</span></span><span style="display:flex;"><span>        public Document pageSoup; // the JSoup scraped hierachy for the page
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        public String fetchPageHTML(String URL) throws IOException{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            // this makes sure we don&#39;t scrape the same page twice
</span></span><span style="display:flex;"><span>            if(this.pageHTML != &#34;&#34;){
</span></span><span style="display:flex;"><span>                return this.pageHTML;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            System.getProperties().setProperty(&#34;httpclient.useragent&#34;, &#34;spider&#34;);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            Random randomGenerator = new Random();
</span></span><span style="display:flex;"><span>            int sleepTime = randomGenerator.nextInt(7000);
</span></span><span style="display:flex;"><span>            try{
</span></span><span style="display:flex;"><span>                Thread.sleep(sleepTime); //sleep for x milliseconds
</span></span><span style="display:flex;"><span>            }catch(Exception e){
</span></span><span style="display:flex;"><span>                // only fires if topic is interruped by another process, should never happen
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            String pageHTML = &#34;&#34;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            HttpClient httpclient = new DefaultHttpClient();
</span></span><span style="display:flex;"><span>            HttpGet httpget = new HttpGet(URL);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                HttpResponse response = httpclient.execute(httpget);
</span></span><span style="display:flex;"><span>                HttpEntity entity = response.getEntity();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                if (entity != null) {
</span></span><span style="display:flex;"><span>                    InputStream instream = entity.getContent();
</span></span><span style="display:flex;"><span>                    String encoding = &#34;UTF-8&#34;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    StringWriter writer = new StringWriter();
</span></span><span style="display:flex;"><span>                    IOUtils.copy(instream, writer, encoding);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    pageHTML = writer.toString();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    // convert entire page scrape to ASCII-safe string
</span></span><span style="display:flex;"><span>                    pageHTML = Normalizer.normalize(pageHTML, Normalizer.Form.NFD).replaceAll(&#34;[^\p{ASCII}]&#34;, &#34;&#34;);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                return pageHTML;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        public Document fetchPageSoup(String pageHTML) throws FetchSoupException{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            // this makes sure we don&#39;t soupify the same page twice
</span></span><span style="display:flex;"><span>            if(this.pageSoup != null){
</span></span><span style="display:flex;"><span>                return this.pageSoup;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            if(pageHTML.equalsIgnoreCase(&#34;&#34;)){
</span></span><span style="display:flex;"><span>                throw new FetchSoupException(&#34;We have no supplied HTML to soupify.&#34;);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            Document pageSoup = Jsoup.parse(pageHTML);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            return pageSoup;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then each class subclasses this scraper class, and adds the actual drilling down through the JSoup hierachy tree to get what is required:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>this.pageHTML = this.fetchPageHTML(this.rootURL);
</span></span><span style="display:flex;"><span>this.pageSoup = this.fetchPageSoup(this.pageHTML);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>// get the first
</span></span><span style="display:flex;"><span>.. section on the page
</span></span><span style="display:flex;"><span>Element forumPageLinkSection = this.pageSoup.getElementsByAttributeValue(&#34;id&#34;,&#34;forum_hd_topic_pagelinks&#34;).first();
</span></span><span style="display:flex;"><span>// get all the links in the above
</span></span><span style="display:flex;"><span> section
</span></span><span style="display:flex;"><span>Elements forumPageLinks = forumPageLinkSection.getElementsByAttribute(&#34;href&#34;);
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>I&rsquo;ve found that this method provides a simple and effective way of scraping pages and using the resultant JSoup tree to pick out important data.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Scraping Gumtree Property Adverts with Python and BeautifulSoup</title>
      <link>http://davidcraddock.net/2011/05/01/scraping-gumtree-property-adverts-with-python-and-beautifulsoup/</link>
      <pubDate>Sun, 01 May 2011 14:07:02 +0000</pubDate>
      
      <guid>http://davidcraddock.net/2011/05/01/scraping-gumtree-property-adverts-with-python-and-beautifulsoup/</guid>
      <description>I am moving to Manchester soon, and so I thought I&amp;rsquo;d get an idea of the housing market there by scraping all the Manchester Gumtree property adverts into a MySQL database. Once in the database, I could do things like find the average monthly price for a 2 bedroom flat in an area, and spot bargains through using standard deviation from the mean on the price through using simple SQL queries via phpMyAdmin.</description>
      <content:encoded><![CDATA[<p>I am moving to Manchester soon, and so I thought I&rsquo;d get an idea of the housing market there by scraping all the Manchester Gumtree property adverts into a MySQL database. Once in the database, I could do things like find the average monthly price for a 2 bedroom flat in an area, and spot bargains through using standard deviation from the mean on the price through using simple SQL queries via <a href="http://www.phpmyadmin.net/home_page/index.php">phpMyAdmin</a>.</p>
<p>I really like the Python library <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> for writing scrapers, there is also a Java version called <a href="http://jsoup.org/">JSoup</a>. BeautifulSoup does a really good job of tolerating markup mistakes in the input data, and transforms a page into a tree structure that is easy to work with.</p>
<p>I chose the following layout for the program:</p>
<p><strong>advert.py</strong> - Stores all information about each property advert, with a &lsquo;save&rsquo; method that inserts the data into the mysql database
<strong>listing.py</strong> - Stores all the information on each listing page, which is broken down into links for specific adverts, and also the link to the next listing page in the sequence (ie: the &rsquo;next page&rsquo; link)
<strong>scrapeAdvert.py</strong> - When given an advert URL, this creates and populates an advert object
<strong>scrapeListing.py</strong> - When given a listing URL, this creates and populates a listing object
<strong>scrapeSequence.py</strong> - This walks through a series of listings, calling scrapeListing and scrapeAdvert for all of them, and finishes when there are no more listings in the sequence to scrape</p>
<p>Here is the MySQL table I created for this project (which you will have to setup if you want to run the scraper):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-mysql" data-lang="mysql"><span style="display:flex;"><span><span style="color:#75715e">--
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">-- Database: `manchester`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">--
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">-- --------------------------------------------------------
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">--
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">-- Table structure for table `adverts`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">--
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">CREATE TABLE IF NOT EXISTS `adverts` (
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">`</span>url<span style="color:#f92672">`</span> <span style="color:#66d9ef">varchar</span>(<span style="color:#ae81ff">255</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>title<span style="color:#f92672">`</span> <span style="color:#66d9ef">text</span> <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>pricePW<span style="color:#f92672">`</span> <span style="color:#66d9ef">int</span>(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>pricePCM<span style="color:#f92672">`</span> <span style="color:#66d9ef">int</span>(<span style="color:#ae81ff">11</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>location<span style="color:#f92672">`</span> <span style="color:#66d9ef">text</span> <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>dateAvailable<span style="color:#f92672">`</span> <span style="color:#66d9ef">date</span> <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>propertyType<span style="color:#f92672">`</span> <span style="color:#66d9ef">text</span> <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>bedroomNumber<span style="color:#f92672">`</span> <span style="color:#66d9ef">int</span>(<span style="color:#ae81ff">11</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>description<span style="color:#f92672">`</span> <span style="color:#66d9ef">text</span> <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (<span style="color:#f92672">`</span>url<span style="color:#f92672">`</span>)
</span></span><span style="display:flex;"><span>) <span style="color:#66d9ef">ENGINE</span><span style="color:#f92672">=</span>MyISAM <span style="color:#66d9ef">DEFAULT</span> <span style="color:#66d9ef">CHARSET</span><span style="color:#f92672">=</span>latin1;
</span></span></code></pre></div><p>PricePCM is price per calendar month, PricePW is price per week. Usually each advert with have one or the other specified.</p>
<p><strong>advert.py:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>import MySQLdb
</span></span><span style="display:flex;"><span>import chardet
</span></span><span style="display:flex;"><span>import sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>class advert:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        url = &#34;&#34;
</span></span><span style="display:flex;"><span>        title = &#34;&#34;
</span></span><span style="display:flex;"><span>        pricePW = 0
</span></span><span style="display:flex;"><span>        pricePCM = 0
</span></span><span style="display:flex;"><span>        location = &#34;&#34;
</span></span><span style="display:flex;"><span>        dateAvailable = &#34;&#34;
</span></span><span style="display:flex;"><span>        propertyType = &#34;&#34;
</span></span><span style="display:flex;"><span>        bedroomNumber = 0
</span></span><span style="display:flex;"><span>        description = &#34;&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def save(self):
</span></span><span style="display:flex;"><span>                # you will need to change the following to match your mysql credentials:
</span></span><span style="display:flex;"><span>                db=MySQLdb.connect(&#34;localhost&#34;,&#34;root&#34;,&#34;secret&#34;,&#34;manchester&#34;)
</span></span><span style="display:flex;"><span>                c=db.cursor()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                self.description = unicode(self.description, errors=&#39;replace&#39;)
</span></span><span style="display:flex;"><span>                self.description = self.description.encode(&#39;ascii&#39;,&#39;ignore&#39;)
</span></span><span style="display:flex;"><span>                # TODO: might need to convert the other strings in the advert if there are any unicode conversetion errors
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                sql = &#34;INSERT INTO adverts (url,title,pricePCM,pricePW,location,dateAvailable,propertyType,bedroomNumber,description) VALUES(&#39;&#34;+self.url+&#34;&#39;,&#39;&#34;+self.title+&#34;&#39;,&#34;+str(self.pricePCM)+&#34;,&#34;+str(self.pricePW)+&#34;,&#39;&#34;+self.location+&#34;&#39;,&#39;&#34;+self.dateAvailable+&#34;&#39;,&#39;&#34;+self.propertyType+&#34;&#39;,&#34;+str(self.bedroomNumber)+&#34;,&#39;&#34;+self.description+&#34;&#39; )&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                c.execute(sql)
</span></span></code></pre></div><p>In advert.py we convert the unicode output that BeautifulSoup gives us into plain ASCII so that we can put it in the MySQL database without any problems. I could have used Unicode in the database as well, but the chances of really needing Unicode for representing Gumtree ads is quite slim. If you intend to use this code then you will also want to enter the MySQL credentials for your database.</p>
<p><strong>listing.py:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>class listing:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        url=&#34;&#34;
</span></span><span style="display:flex;"><span>        adverturls=[]
</span></span><span style="display:flex;"><span>        nextLink=&#34;&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def addAdvertURL(self,url):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                self.adverturls.append(url)
</span></span></code></pre></div><p><strong>scrapeAdvert.py:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>from BeautifulSoup import BeautifulSoup          # For processing HTML
</span></span><span style="display:flex;"><span>import urllib2
</span></span><span style="display:flex;"><span>from advert import advert
</span></span><span style="display:flex;"><span>import time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>class scrapeAdvert:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        page = &#34;&#34;
</span></span><span style="display:flex;"><span>        soup = &#34;&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def scrape(self,advertURL):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                # give it a bit of time so gumtree doesn&#39;t
</span></span><span style="display:flex;"><span>                # ban us
</span></span><span style="display:flex;"><span>                time.sleep(2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                url = advertURL
</span></span><span style="display:flex;"><span>                # print &#34;-- scraping &#34;+url+&#34; --&#34;
</span></span><span style="display:flex;"><span>                page = urllib2.urlopen(url)
</span></span><span style="display:flex;"><span>                self.soup = BeautifulSoup(page)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                self.anAd = advert()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                self.anAd.url = url
</span></span><span style="display:flex;"><span>                self.anAd.title = self.extractTitle()
</span></span><span style="display:flex;"><span>                self.anAd.pricePW = self.extractPricePW()
</span></span><span style="display:flex;"><span>                self.anAd.pricePCM = self.extractPricePCM()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                self.anAd.location = self.extractLocation()
</span></span><span style="display:flex;"><span>                self.anAd.dateAvailable = self.extractDateAvailable()
</span></span><span style="display:flex;"><span>                self.anAd.propertyType = self.extractPropertyType()
</span></span><span style="display:flex;"><span>                self.anAd.bedroomNumber = self.extractBedroomNumber()
</span></span><span style="display:flex;"><span>                self.anAd.description = self.extractDescription()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractTitle(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                location = self.soup.find(&#39;h1&#39;)
</span></span><span style="display:flex;"><span>                string = location.contents[0]
</span></span><span style="display:flex;"><span>                stripped = &#39; &#39;.join(string.split())
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#34;&#39;&#34;,&#39;&#34;&#39;)
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + stripped + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return stripped
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractPricePCM(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                location = self.soup.find(&#39;span&#39;,attrs={&#34;class&#34; : &#34;price&#34;})
</span></span><span style="display:flex;"><span>                try:
</span></span><span style="display:flex;"><span>                        string = location.contents[0]
</span></span><span style="display:flex;"><span>                        string.index(&#39;pcm&#39;)
</span></span><span style="display:flex;"><span>                except AttributeError: # for ads with no prices set
</span></span><span style="display:flex;"><span>                        return 0
</span></span><span style="display:flex;"><span>                except ValueError: # for ads with pw specified
</span></span><span style="display:flex;"><span>                        return 0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                stripped = string.replace(&#39;£&#39;,&#39;&#39;)
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#39;pcm&#39;,&#39;&#39;)
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#39;,&#39;,&#39;&#39;)
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#34;&#39;&#34;,&#39;&#34;&#39;)
</span></span><span style="display:flex;"><span>                stripped = &#39; &#39;.join(stripped.split())
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + stripped + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return int(stripped)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractPricePW(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                location = self.soup.find(&#39;span&#39;,attrs={&#34;class&#34; : &#34;price&#34;})
</span></span><span style="display:flex;"><span>                try:
</span></span><span style="display:flex;"><span>                        string = location.contents[0]
</span></span><span style="display:flex;"><span>                        string.index(&#39;pw&#39;)
</span></span><span style="display:flex;"><span>                except AttributeError: # for ads with no prices set
</span></span><span style="display:flex;"><span>                        return 0
</span></span><span style="display:flex;"><span>                except ValueError: # for ads with pcm specified
</span></span><span style="display:flex;"><span>                        return 0
</span></span><span style="display:flex;"><span>                stripped = string.replace(&#39;£&#39;,&#39;&#39;)
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#39;pw&#39;,&#39;&#39;)
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#39;,&#39;,&#39;&#39;)
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#34;&#39;&#34;,&#39;&#34;&#39;)
</span></span><span style="display:flex;"><span>                stripped = &#39; &#39;.join(stripped.split())
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + stripped + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return int(stripped)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractLocation(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                location = self.soup.find(&#39;span&#39;,attrs={&#34;class&#34; : &#34;location&#34;})
</span></span><span style="display:flex;"><span>                string = location.contents[0]
</span></span><span style="display:flex;"><span>                stripped = &#39; &#39;.join(string.split())
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#34;&#39;&#34;,&#39;&#34;&#39;)
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + stripped + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return stripped
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractDateAvailable(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                current_year = &#39;2011&#39;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                ul = self.soup.find(&#39;ul&#39;,attrs={&#34;id&#34; : &#34;ad-details&#34;})
</span></span><span style="display:flex;"><span>                firstP = ul.findAll(&#39;p&#39;)[0]
</span></span><span style="display:flex;"><span>                string = firstP.contents[0]
</span></span><span style="display:flex;"><span>                stripped = &#39; &#39;.join(string.split())
</span></span><span style="display:flex;"><span>                date_to_convert = stripped + &#39;/&#39;+current_year
</span></span><span style="display:flex;"><span>                try:
</span></span><span style="display:flex;"><span>                        date_object = time.strptime(date_to_convert, &#34;%d/%m/%Y&#34;)
</span></span><span style="display:flex;"><span>                except ValueError: # for adverts with no date available
</span></span><span style="display:flex;"><span>                        return &#34;&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                full_date = time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;, date_object)
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + full_date + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return full_date
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractPropertyType(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                ul = self.soup.find(&#39;ul&#39;,attrs={&#34;id&#34; : &#34;ad-details&#34;})
</span></span><span style="display:flex;"><span>                try:
</span></span><span style="display:flex;"><span>                        secondP = ul.findAll(&#39;p&#39;)[1]
</span></span><span style="display:flex;"><span>                except IndexError: # for properties with no type
</span></span><span style="display:flex;"><span>                        return &#34;&#34;
</span></span><span style="display:flex;"><span>                string = secondP.contents[0]
</span></span><span style="display:flex;"><span>                stripped = &#39; &#39;.join(string.split())
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#34;&#39;&#34;,&#39;&#34;&#39;)
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + stripped + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return stripped
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractBedroomNumber(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                ul = self.soup.find(&#39;ul&#39;,attrs={&#34;id&#34; : &#34;ad-details&#34;})
</span></span><span style="display:flex;"><span>                try:
</span></span><span style="display:flex;"><span>                        thirdP = ul.findAll(&#39;p&#39;)[2]
</span></span><span style="display:flex;"><span>                except IndexError: # for properties with no bedroom number
</span></span><span style="display:flex;"><span>                        return 0
</span></span><span style="display:flex;"><span>                string = thirdP.contents[0]
</span></span><span style="display:flex;"><span>                stripped = &#39; &#39;.join(string.split())
</span></span><span style="display:flex;"><span>                stripped = stripped.replace(&#34;&#39;&#34;,&#39;&#34;&#39;)
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + stripped + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return stripped
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractDescription(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                div = self.soup.find(&#39;div&#39;,attrs={&#34;id&#34; : &#34;description&#34;})
</span></span><span style="display:flex;"><span>                description = div.find(&#39;p&#39;)
</span></span><span style="display:flex;"><span>                contents = description.renderContents()
</span></span><span style="display:flex;"><span>                contents = contents.replace(&#34;&#39;&#34;,&#39;&#34;&#39;)
</span></span><span style="display:flex;"><span>                # print &#39;|&#39; + contents + &#39;|&#39;
</span></span><span style="display:flex;"><span>                return contents
</span></span></code></pre></div><p>In scrapeAdvert.py there are a lot of string manipulation statements to pull out any unwanted characters, such as the &lsquo;pw&rsquo; characters (short for per week) found in the price string, which we need to remove in order to store the property price per week as an integer.</p>
<p>Using BeautifulSoup to pull out elements is quite easy, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>ul = self.soup.find(&#39;ul&#39;,attrs={&#34;id&#34; : &#34;ad-details&#34;})
</span></span></code></pre></div><p>That finds all the HTML elements under the tag id=&ldquo;ad-details&rdquo;, so all the list elements in that list. More detail can be found in the <a href="http://www.crummy.com/software/BeautifulSoup/documentation.html">Beautiful Soup documentation</a> which is very good.</p>
<p><strong>scrapeListing.py:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>from BeautifulSoup import BeautifulSoup          # For processing HTML
</span></span><span style="display:flex;"><span>import urllib2
</span></span><span style="display:flex;"><span>from listing import listing
</span></span><span style="display:flex;"><span>import time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>class scrapeListing:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        soup = &#34;&#34;
</span></span><span style="display:flex;"><span>        url = &#34;&#34;
</span></span><span style="display:flex;"><span>        aListing = &#34;&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def scrape(self,url):
</span></span><span style="display:flex;"><span>                # give it a bit of time so gumtree doesn&#39;t
</span></span><span style="display:flex;"><span>                # ban us
</span></span><span style="display:flex;"><span>                time.sleep(3)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                print &#34;scraping url = &#34;+str(url)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                page = urllib2.urlopen(url)
</span></span><span style="display:flex;"><span>                self.soup = BeautifulSoup(page)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                self.aListing = listing()
</span></span><span style="display:flex;"><span>                self.aListing.url = url
</span></span><span style="display:flex;"><span>                self.aListing.adverturls = self.extractAdvertURLs()
</span></span><span style="display:flex;"><span>                self.aListing.nextLink = self.extractNextLink()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractAdvertURLs(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                toReturn = []
</span></span><span style="display:flex;"><span>                h3s = self.soup.findAll(&#34;h3&#34;)
</span></span><span style="display:flex;"><span>                for h3 in h3s:
</span></span><span style="display:flex;"><span>                        links = h3.findAll(&#39;a&#39;,{&#34;class&#34;:&#34;summary&#34;})
</span></span><span style="display:flex;"><span>                        for link in links:
</span></span><span style="display:flex;"><span>                                print &#34;|&#34;+link[&#39;href&#39;]+&#34;|&#34;
</span></span><span style="display:flex;"><span>                                toReturn.append(link[&#39;href&#39;])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                return toReturn
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        def extractNextLink(self):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                links = self.soup.findAll(&#34;a&#34;,{&#34;class&#34;:&#34;next&#34;})
</span></span><span style="display:flex;"><span>                try:
</span></span><span style="display:flex;"><span>                        print &#34;&gt;&#34;+links[0][&#39;href&#39;]+&#34;&gt;&#34;
</span></span><span style="display:flex;"><span>                except IndexError: # if there is no &#39;next&#39; link found..
</span></span><span style="display:flex;"><span>                        return &#34;&#34;
</span></span><span style="display:flex;"><span>                return links[0][&#39;href&#39;]
</span></span></code></pre></div><p>The extractNextLink method here extracts the pagination &rsquo;next&rsquo; link which will bring up the next listing page from the selection of listing pages to browse. We use it to step through the pagination &lsquo;sequence&rsquo; of resultant listing pages.</p>
<p><strong>scrapeSequence.py:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>from scrapeListing import scrapeListing
</span></span><span style="display:flex;"><span>from scrapeAdvert import scrapeAdvert
</span></span><span style="display:flex;"><span>from listing import listing
</span></span><span style="display:flex;"><span>from advert import advert
</span></span><span style="display:flex;"><span>import MySQLdb
</span></span><span style="display:flex;"><span>import _mysql_exceptions
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># change this to the gumtree page you want to start scraping from
</span></span><span style="display:flex;"><span>url = &#34;http://www.gumtree.com/flats-and-houses-for-rent/salford-quays&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>while url != None:
</span></span><span style="display:flex;"><span>        print &#34;scraping URL = &#34;+url
</span></span><span style="display:flex;"><span>        sl = &#34;&#34;
</span></span><span style="display:flex;"><span>        sl = scrapeListing()
</span></span><span style="display:flex;"><span>        sl.scrape(url)
</span></span><span style="display:flex;"><span>        for advertURL in sl.aListing.adverturls:
</span></span><span style="display:flex;"><span>                sa = &#34;&#34;
</span></span><span style="display:flex;"><span>                sa = scrapeAdvert()
</span></span><span style="display:flex;"><span>                sa.scrape(advertURL)
</span></span><span style="display:flex;"><span>                try:
</span></span><span style="display:flex;"><span>                        sa.anAd.save()
</span></span><span style="display:flex;"><span>                except _mysql_exceptions.IntegrityError:
</span></span><span style="display:flex;"><span>                        print &#34;** Advert &#34; + sa.anAd.url + &#34; already saved **&#34;
</span></span><span style="display:flex;"><span>                sa.onAd = &#34;&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        url = &#34;&#34;
</span></span><span style="display:flex;"><span>        if sl.aListing.nextLink:
</span></span><span style="display:flex;"><span>                print &#34;nextLink = &#34;+sl.aListing.nextLink
</span></span><span style="display:flex;"><span>                url = sl.aListing.nextLink
</span></span><span style="display:flex;"><span>        else:
</span></span><span style="display:flex;"><span>                print &#39;all done.&#39;
</span></span><span style="display:flex;"><span>                break
</span></span></code></pre></div><p>This is the file you run to kick off the scrape. It uses an MySQL IntegrityError try/except block to pick out when an advert has already been entered into the database, this will throw an error because the URL of the advert is the primary key in the database. So no two records can have the same primary key.</p>
<p>The URL you provide it above gives you the starting page from which to scrape from.</p>
<p>The above code worked well for scraping several hundred Manchester Gumtree ads into a database, from which point I was able to use a combination of phpMyAdmin and OpenOffice Spreadsheet to analyse the data and find out useful statistics about the property market in said area.</p>
<p><a href="http://www.davidcraddock.net/uploads/gumtree-scraper.tgz">Download the scraper source code in a tar.gz archive</a></p>
<p>Note: Due to the nature of web scraping, if - or more accurately, when - Gumtree changes its user interface, the scraper I have written will need to be tweaked accordingly to find the right data. This is meant to be an informative tutorial, not a finished product.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
