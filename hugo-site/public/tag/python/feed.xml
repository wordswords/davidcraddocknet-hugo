<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on DavidCraddock.net</title>
    <link>https://davidcraddock.net/tag/python/</link>
    <description>Recent content in Python on DavidCraddock.net</description>
    <generator>Hugo -- 0.134.1</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Jun 2014 00:24:34 +0000</lastBuildDate>
    <atom:link href="https://davidcraddock.net/tag/python/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A* Algorithm implementation in Python</title>
      <link>https://davidcraddock.net/2014/06/12/a-algorithm-implementation-in-python/</link>
      <pubDate>Thu, 12 Jun 2014 00:24:34 +0000</pubDate>
      <guid>https://davidcraddock.net/2014/06/12/a-algorithm-implementation-in-python/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://davidcraddock.net/wp-content/uploads/2014/06/pathfinding.jpg&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://davidcraddock.net/wp-content/uploads/2014/06/pathfinding.jpg&#34; alt=&#34;pathfinding&#34;  /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lately I&amp;rsquo;ve had the idea of creating a text-based &lt;a href=&#34;http://en.wikipedia.org/wiki/Roguelike&#34;&gt;Roguelike&lt;/a&gt; in C++. This lead me on to think about the game AI experiments that I worked during my degree in &lt;a href=&#34;http://www.sussex.ac.uk/informatics/&#34;&gt;Computer Science and A.I.&lt;/a&gt;. Essential to game AI is the notion of pathfinding, or finding a path from &amp;lsquo;A&amp;rsquo; to &amp;lsquo;B&amp;rsquo;, past any obstacles that get in the way. One way to do this is to use the A* algorithm. I decided to implement an A* pathfinding algorithm for possible use in a Roguelike later, and chose &lt;a href=&#34;http://en.wikipedia.org/wiki/A*_search_algorithm&#34;&gt;the pseudocode from the Wikipedia example&lt;/a&gt; to implement.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scraping Gumtree Property Adverts with Python and BeautifulSoup</title>
      <link>https://davidcraddock.net/2011/05/01/scraping-gumtree-property-adverts-with-python-and-beautifulsoup/</link>
      <pubDate>Sun, 01 May 2011 14:07:02 +0000</pubDate>
      <guid>https://davidcraddock.net/2011/05/01/scraping-gumtree-property-adverts-with-python-and-beautifulsoup/</guid>
      <description>&lt;p&gt;I am moving to Manchester soon, and so I thought I&amp;rsquo;d get an idea of the housing market there by scraping all the Manchester Gumtree property adverts into a MySQL database. Once in the database, I could do things like find the average monthly price for a 2 bedroom flat in an area, and spot bargains through using standard deviation from the mean on the price through using simple SQL queries via &lt;a href=&#34;http://www.phpmyadmin.net/home_page/index.php&#34;&gt;phpMyAdmin&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MicroKORG &#43; Python = MIDI fun!</title>
      <link>https://davidcraddock.net/2009/03/30/microkorg-python-midi-fun/</link>
      <pubDate>Mon, 30 Mar 2009 00:14:10 +0000</pubDate>
      <guid>https://davidcraddock.net/2009/03/30/microkorg-python-midi-fun/</guid>
      <description>&lt;p&gt;So, about a month ago I got a second-hand &lt;a href=&#34;http://en.wikipedia.org/wiki/MicroKORG&#34;&gt;microKORG&lt;/a&gt; from Ebay. Fiddling around with the preset patches, and creating new patches is great fun, even though I only know a few chords. Recently I plugged it in to my PC via my &lt;a href=&#34;http://www.dolphinmusic.co.uk/product/1773-m-audio-uno-usb.html&#34;&gt;M-Audio Uno USB-&amp;gt;MIDI interface&lt;/a&gt;, and soon was using Ableton Live to program drums in time with the microKORG&amp;rsquo;s arp.&lt;/p&gt;
&lt;p&gt;I thought I&amp;rsquo;d experiment the music libraries available in python, and see if I could send notes to the synth via MIDI. Turns out that the M-Audio Uno is supported under Ubuntu, all you have to do is install the &lt;code&gt;midisport-firmware&lt;/code&gt; package. With the help of &lt;a href=&#34;http://trac2.assembla.com/pkaudio/wiki/pyrtmidi&#34;&gt;pyrtmidi&lt;/a&gt;, a set of python wrappers around the C++ audio library rtmidi I was able to recieve MIDI signals in realtime from the microKORG, and send them in realtime also. With the help of &lt;a href=&#34;http://www.davidcraddock.net/images/midilib.py&#34;&gt;this&lt;/a&gt; old midi file reader/writer library that I found posted to a python mailing list, I&amp;rsquo;ve made some progress in writing a simple MIDI file player that sends notes to the &amp;lsquo;KORG.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eclipse 3.4.2 &#43; Pydev &#43; Eclim = win</title>
      <link>https://davidcraddock.net/2009/03/27/eclipse-342-pydev-eclim-win/</link>
      <pubDate>Fri, 27 Mar 2009 23:47:59 +0000</pubDate>
      <guid>https://davidcraddock.net/2009/03/27/eclipse-342-pydev-eclim-win/</guid>
      <description>&lt;p&gt;So, after saying all that stuff about how vimplugin and EasyEclipse was great, I actually started to use the setup heavily, and it started to annoy me.&lt;/p&gt;
&lt;p&gt;For one, EE is not a recent build of eclipse, nor does it come with a full set of recent plugins. This makes it annoyingly difficult to use when you want to use more than the set of plugins it packages for you. As far as vimplugin goes, it does not provide the vim integration I thought it might from embedded vim. Not really even close.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
